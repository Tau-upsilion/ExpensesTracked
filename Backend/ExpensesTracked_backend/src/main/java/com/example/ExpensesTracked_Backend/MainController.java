package com.example.ExpensesTracked_Backend;

import java.util.ArrayList;
import java.util.Date;

import javax.servlet.ServletException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.ExpensesTracked_Backend.service.CategoryRepository;
import com.example.ExpensesTracked_Backend.service.ExpensesRepository;
import com.example.ExpensesTracked_Backend.service.UserRepository;
import com.example.ExpensesTracked_Backend.service.imp.Category;
import com.example.ExpensesTracked_Backend.service.imp.Expenses;
import com.example.ExpensesTracked_Backend.service.imp.User;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;


@RestController    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private ExpensesRepository expenseRepository;
	@Autowired
	private CategoryRepository categoryRepository;
	
	
	
	@PostMapping(path="/register") // Map ONLY GET Requests
	public @ResponseBody User addNewUser (@RequestBody User n) throws CloneNotSupportedException {
		ArrayList<User> s = (ArrayList<User>) userRepository.findAllByemail(n.getEmail());
		User result =(User) n.clone();
		if(s.size() > 1) {
			result.setError(true);
			result.setError_msg("You are already registered!");
			return result;
		} else {
			userRepository.save(n);
		}
		return result;
	}
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	@GetMapping("/users/{id}")
	User one(@PathVariable Integer id) {
		return userRepository.findById(id)
				.orElseThrow();
	}
	@PostMapping(path="/login")
	public String login(@RequestBody User n) throws ServletException{
		String jwtToken = "";
		if(n.getEmail() == null || n.getPassword() == null) {
			throw new ServletException("Please fill in username and password");
		}
		
		String email = n.getEmail();
		String password = n.getPassword();
		User user = userRepository.getUserByemail(email);
		
		if (user == null) {
			throw new ServletException("User email not found.");
		}
		
		String pwd = user.getPassword();
		
		if(!password.equals(pwd)) {
			throw new ServletException("Invalid Login. Check email and password.");
		}
		
		jwtToken = Jwts.builder().setSubject(email).claim("roles", "user").setIssuedAt(new Date())
				.signWith(SignatureAlgorithm.HS256, "secretkey").compact();
		
		return jwtToken;
	}
	@GetMapping(path="/expenses/all")
	public @ResponseBody Iterable<Expenses> getAllExpenses(){
		return expenseRepository.findAll();
	}
	@PostMapping(path="/expenses/add")
	public @ResponseBody String addNewExpense(@RequestBody Expenses n) {
		expenseRepository.save(n);
		return "Saved";
	}
	@GetMapping(path="/expenses/{id}")
	Expenses getExpense(@PathVariable int id) {
		return expenseRepository.findById(id).orElseThrow();
	}
	@GetMapping(path="/expenses/user/{id}")
	public @ResponseBody Iterable<Expenses> getAllExpensesByUser(@PathVariable int id){
		ArrayList<Expenses> l = new ArrayList<Expenses>();
		for(int i = 0; i < expenseRepository.count(); i++) {
			if(expenseRepository.findById(i).get().getUserID() == id) {
				l.add(expenseRepository.findById(i).orElseThrow());
			}
		}
		return l;
	}
	
	@GetMapping(path="/category/all")
	public @ResponseBody Iterable<Category> getAllCategory(){
		return categoryRepository.findAll();
	}
	
	@PostMapping(path="/category/add")
	public @ResponseBody String addNewCategory(@RequestBody Category n) {
		categoryRepository.save(n);
		return "Saved";
	}
	@GetMapping(path="/category/{id}")
	Category getCategory(@PathVariable int id) {
		return categoryRepository.findById(id).orElseThrow();
	}


}